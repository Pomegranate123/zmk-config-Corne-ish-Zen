/*
*
* Copyright (c) 2021 lowprokb.ca
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define NAV 1
#define NUM 2
#define FUN 3

/ {
    combos {
        compatible = "zmk,combos";
        combo_tilde {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp TILDE>;
            layers = <0>;
        };
        combo_bslh {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp BSLH>;
            layers = <0>;
        };
        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp LBKT>;
            layers = <0>;
        };
        combo_rbkt {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp RBKT>;
            layers = <0>;
        };
        combo_fslh {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp FSLH>;
            layers = <0>;
        };
        combo_caret {
            timeout-ms = <50>;
            key-positions = <9 10>;
            bindings = <&kp CARET>;
            layers = <0>;
        };
        combo_percent {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp PRCNT>;
            layers = <0>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&kp TAB>;
            layers = <0>;
        };
        combo_lpar {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp LPAR>;
            layers = <0>;
        };
        combo_rpar {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp RPAR>;
            layers = <0>;
        };
        combo_esc {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp ESC>;
            layers = <0>;
        };
        combo_at {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp AT>;
            layers = <0>;
        };
        combo_amps {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp AMPS>;
            layers = <0>;
        };
        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp LBRC>;
            layers = <0>;
        };
        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&kp RBRC>;
            layers = <0>;
        };
        combo_pipe {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&kp PIPE>;
            layers = <0>;
        };

        combo_plus {
            timeout-ms = <50>;
            key-positions = <2 14>;
            bindings = <&kp PLUS>;
            layers = <0>;
        };
        combo_astrk {
            timeout-ms = <50>;
            key-positions = <3 15>;
            bindings = <&kp ASTRK>;
            layers = <0>;
        };
        combo_underscore {
            timeout-ms = <50>;
            key-positions = <5 17>;
            bindings = <&kp UNDER>;
            layers = <0>;
        };
        combo_hash {
            timeout-ms = <50>;
            key-positions = <7 19>;
            bindings = <&kp HASH>;
            layers = <0>;
        };
        combo_dllr {
            timeout-ms = <50>;
            key-positions = <8 20>;
            bindings = <&kp DLLR>;
            layers = <0>;
        };
        combo_grave {
            timeout-ms = <50>;
            key-positions = <9 21>;
            bindings = <&kp GRAVE>;
            layers = <0>;
        };
        combo_qmark {
            timeout-ms = <50>;
            key-positions = <14 26>;
            bindings = <&kp QMARK>;
            layers = <0>;
        };
        combo_colon {
            timeout-ms = <50>;
            key-positions = <15 27>;
            bindings = <&kp COLON>;
            layers = <0>;
        };
        combo_semi {
            timeout-ms = <50>;
            key-positions = <16 28>;
            bindings = <&kp SEMI>;
            layers = <0>;
        };
        combo_dqt {
            timeout-ms = <50>;
            key-positions = <17 29>;
            bindings = <&kp DQT>;
            layers = <0>;
        };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <19 31>;
            bindings = <&kp EQUAL>;
            layers = <0>;
        };
        combo_ret {
            timeout-ms = <50>;
            key-positions = <20 32>;
            bindings = <&kp RET>;
            layers = <0>;
        };
        combo_excl {
            timeout-ms = <50>;
            key-positions = <21 33>;
            bindings = <&kp EXCL>;
            layers = <0>;
        };
    };
    
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEF";
            bindings = <
&none     &kp X      &kp F      &kp O      &kp U      &kp MINUS     &kp Q     &kp P      &kp L      &kp B      &kp Z      &none
&none     &hm LGUI W &hm LALT H &hm LCTL A &hm LSFT I &kp Y         &kp G     &hm RSFT T &hm RCTL R &hm RALT S &hm RGUI M &none
&none     &kp J      &kp K      &kp COMMA  &kp DOT    &kp QUOT      &kp LPAR  &kp D      &kp N      &kp C      &kp V      &none
                                &kp TAB    &lt NAV E  &kp BSPC      &kp RET   &lt NUM SPACE &lt FUN ESC
            >;
        };

        nav_layer {
            label = "NAV";
            bindings = <
&none     &none      &kp LC(A)  &kp LC(C)  &kp LC(V)  &kp DEL       &none     &none      &none      &none      &none      &none
&none     &kp LGUI   &kp LALT   &kp LCTL   &kp LSFT   &kp RET       &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &none      &none
&none     &none      &none      &none      &none      &kp LA(LS(C)) &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &none      &none
                                &none      &none      &none         &trans    &trans     &trans
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
&none     &kp GT     &kp N6     &kp N5     &kp N4     &kp LT        &none     &none      &none      &none      &none      &none
&none     &kp RBRC   &kp N3     &kp N2     &kp N1     &kp LBRC      &kp EQUAL &kp RSFT   &kp RCTL   &kp RALT   &kp RGUI   &none
&none     &kp RBKT   &kp N9     &kp N8     &kp N7     &kp LBKT      &none     &none      &none      &none      &none      &none
                                &kp FSLH   &kp N0     &kp BSPC      &trans    &trans     &trans
            >;
        };

/*        sym_layer {
*            label = "SYM";
*            bindings = <
*&none     &kp TILDE  &kp BSLH   &none      &none      &kp CARET     &none     &none      &none      &none      &none      &none
*&none     &kp AT     &kp ASTRK  &kp AMPS   &kp HASH   &kp FSLH      &none     &kp RSFT   &kp RCTL   &kp RALT   &kp RGUI   &none
*&none     &kp PRCNT  &kp QMARK  &kp PLUS   &kp EXCL   &kp GRAVE     &none     &none      &none      &none      &none      &none
*                                &kp PIPE   &kp DLLR   &kp BSPC      &trans    &trans     &trans
*            >;
*        };
*/
        fun_layer {
            label = "fun";
            bindings = <
&none     &none      &kp F6     &kp F5     &kp F4     &none         &none     &kp F14    &kp F15    &kp F16    &none      &none
&none     &none      &kp F3     &kp F2     &kp F1     &none         &none     &kp F11    &kp F12    &kp F13    &none      &none
&none     &none      &kp F9     &kp F8     &kp F7     &none         &none     &kp F17    &kp F18    &kp F19    &none      &none
                                &none      &kp F10    &none         &trans    &trans     &trans
            >;
        };
    };
};

